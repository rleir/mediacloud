<!-- MEDIACLOUD-TOC-START -->

Table of Contents
=================

   * [Perl -&gt; Python rewrite caveats](#perl---python-rewrite-caveats)
      * [General](#general)
         * [Translate strings coming from Perl to Python as bytes](#translate-strings-coming-from-perl-to-python-as-bytes)
         * [Add comment with MC_REWRITE_TO_PYTHON string near transitional code](#add-comment-with-mc_rewrite_to_python-string-near-transitional-code)
         * [Don't attempt to modify values returned from Python](#dont-attempt-to-modify-values-returned-from-python)
         * [Don't use @property in Python code that gets called by Perl](#dont-use-property-in-python-code-that-gets-called-by-perl)
         * [Don't call Perl code from Python](#dont-call-perl-code-from-python)
         * [Avoid using global module variables in Python](#avoid-using-global-module-variables-in-python)
         * [Keep in mind that Python booleans get returned as Inline::Python::Boolean](#keep-in-mind-that-python-booleans-get-returned-as-inlinepythonboolean)
      * [Database](#database)
         * [Pass 't' or <code>'f'</code> instead of integers for boolean fields](#pass-t-or-f-instead-of-integers-for-boolean-fields)
         * [Avoid using quote() on Perl side](#avoid-using-quote-on-perl-side)
         * [Pass LIKE pattern string as a parameter](#pass-like-pattern-string-as-a-parameter)
         * [Be wary about using literal \x in SQL queries](#be-wary-about-using-literal--in-sql-queries)
         * [Don't use pass-by-reference trick to create()](#dont-use-pass-by-reference-trick-to-create)

----
<!-- MEDIACLOUD-TOC-END -->


# Perl -> Python rewrite caveats

## General

### Translate strings coming from Perl to Python as `bytes`

Perl strings [reach Python 3 code as `bytes` and not as `str`](http://search.cpan.org/~nine/Inline-Python/Python.pod#PORTING_YOUR_INLINE_PYTHON_CODE_FROM_2_TO_3). Thus, encode them to `str` first by using `decode_object_from_bytes_if_needed()` helper:

```python
def foo(bar):
    
    bar = decode_object_from_bytes_if_needed(bar)
    
    # ...
```


### Add comment with `MC_REWRITE_TO_PYTHON` string near transitional code

If you have to write some extra Python code just to improve its interoperability with Perl, add a comment with a string `MC_REWRITE_TO_PYTHON` so that this code is easy to find and remove later on:

```python
def foo(bar):
    
    # Do some extra preprocessing before continuing
    # because data coming from Perl might be mucked
    # in some twisted way
    # MC_REWRITE_TO_PYTHON remove after porting
    if coming_from_perl(bar):
        bar = do_perl_preprocessing(bar)
    
    # ...
```

You don't have to add a comment with `MC_REWRITE_TO_PYTHON` string in it if you use helper functions from `util/perl.py`.


### Don't attempt to modify values returned from Python

(Probably) due to how `Inline::Perl` manages memory, trying to modify (e.g. set by reference) values returned from Python code will lead to nasty errors:

```perl
# BAD!
my $hashref = python_function();
$hashref->{ foo } = 'bar';
```

To make the returned variable writable, you can use globally available `python_deep_copy()` helper which accepts value of any type and returns a deep copy of said variable:

```perl
# GOOD!
my $hashref = python_function();
$hashref = python_deep_copy( $hashref );
$hashref->{ foo } = 'bar';
```

This pretty much implies that procedures that edit a parameter variable by reference are a no-no in this brave new world. Simply make them into functions which return a value and use said value.

Values returned from the PostgreSQL database handler are already deep copied, so you don't need to run them through `python_deep_copy()` again.


### Don't use `@property` in Python code that gets called by Perl

`Inline::Perl` doesn't seem to support Python's native object properties:

```python
# BAD!
#
# Calling $bar->foo() from Perl will fail with:
#
#     Attempted to call non-method 'foo' at /Users/pypt/.perlbrew/libs/perl-system@mediacloud/lib/perl5/darwin-thread-multi-2level/Inline/Python.pm line 337.
class Foo:

    @property
    def foo(self):
        return self.__foo
```

Instead, use a simple method:

```python
# GOOD!
class Foo:

    def foo(self):
        return self.__foo
```


### Don't call Perl code from Python

Don't call Perl code from Python code to keep this transition top-down (or, rather, down-up).

This means that you shouldn't pass Perl objects (be it Media Cloud's own code or objects coming from a third party library, e.g. `LWP::UserAgent`) to Python.

Keep the Perl-Python interaction to the most primitive types (strings, integers, booleans, `undef`, etc.)


### Avoid using global module variables in Python

Long story short, sometimes a Python module might get imported twice and rewrite a global variable the value of which you have modified previously:

```python
# BAD!
__global_variable = None

def set_global_variable(global_variable):
    __global_variable = global_variable

def global_variable():
    return __global_variable
```

In the example above, `__global_variable` might get reset to `None` variable if it gets imported again.

A safe alternative to global variables is using a class:

```python
# GOOD!

class GlobalVariable(object):

    __global_variable = None

    def set_global_variable(self, global_variable):
        self.__global_variable = global_variable

    def global_variable(self):
        return self.__global_variable
```


### Keep in mind that Python booleans get returned as `Inline::Python::Boolean`

`Inline::Python::Boolean` evaluate to either `0` (`False`) or `1` (`True`) in scalar context (`int($variable)`), but they still might break some code which expects vanilla scalars instead of references.


## Database

### Pass `'t'` or `'f'` instead of integers for boolean fields

psycopg2 is strict about parameter types and thus expects Python's `bool` to be passed for PostgreSQL `BOOLEAN` type.

Due to various reasons, we can't really cast all integers to Python booleans dynamically. Luckily, PostgreSQL accepts string `'t'` or `'f'` as valid `BOOLEAN` values.

Instead of:

```perl
$boolean_value = $boolean_value ? 't' : 'f';
```

...you might consider a globally available `normalize_boolean_for_db($value, [$allow_null])` helper which supports various forms the "boolean" type in Perl might take (`'f'`/`'t'`, `0`/`1`, ...):

```perl
$boolean_value = normalize_boolean_for_db( $boolean_value );
```

or:

```perl
# BOOLEAN field might have NULL value
my $allow_null = 1;
$boolean_value = normalize_boolean_for_db( $boolean_value, $allow_null );
```


### Avoid using `quote()` on Perl side

When SQL queries come from the Perl code, `query()` does some extra query translation trying to convert DBD::Pg-style queries to psycopg2 ones.

The translation code tries its best to escape strings that need to be escaped, but is still potentially error-prone. Thus, it is not advisable to pass overly complex SQL queries (which might get complicated by `quote()` escaping unpredictable strings) directly to `query()`.

Using `quote()` from Python side is safe, provided that you use either dictionary or tuple parameters.


### Pass `LIKE` pattern string as a parameter

Query translation does not support converting concatenated `LIKE` pattern strings:

```perl
# BAD!
my $pattern = $db->quote('word');
$db->query("
    SELECT *
    FROM foo
    WHERE bar LIKE '%' || $pattern || '%'
");
```

...so, pass the `LIKE` pattern as a parameter:

```perl
# GOOD!
my $pattern = '%' . 'word' . '%';
$db->query( "
    SELECT *
    FROM foo
    WHERE bar LIKE ?
", $pattern);
```


### Be wary about using literal `%` in SQL queries

psycopg2 interpolates `%` to a query parameter placeholder, so to use a literal `%`, you might need to duplicate it (`%%`).


### Don't use pass-by-reference trick to `create()`

The pass-by-reference trick to `create()` does not work anymore:

```perl
# BAD
$db->create('table', {
    'name' = 'Foo',
    'date_created' => \'NOW()'
});
```
