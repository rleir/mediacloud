- name: Inspect swarm on first manager
  docker_swarm_info:
    # List nodes later to be used for setting labels:
    nodes: true
  become: true
  become_user: root
  # Run only on the first host defined as a swarm manager:
  delegate_to: "{{ groups.docker_swarm_managers[0] }}"
  register: docker_swarm_info
  tags:
    - docker-swarm-worker

- name: Set fact of worker join token
  set_fact:
    swarm_worker_join_token: "{{ docker_swarm_info.swarm_facts.JoinTokens.Worker }}"
  # Register on all hosts:
  run_once: true
  tags:
    - docker-swarm-worker

- name: Set fact of leader's advertised interface
  set_fact:
    leader_advertised_interface_worker: "{{ hostvars[groups.docker_swarm_managers[0]]['docker_swarm_advertise_interface'] }}"
  # Register on all hosts:
  run_once: true
  tags:
    - docker-swarm-worker

- name: Add node to swarm
  docker_swarm:
    state: join
    advertise_addr: "{{ docker_swarm_advertise_interface }}"
    join_token: "{{ swarm_worker_join_token }}"
    remote_addrs:
      # IP address of first host in swarm manager group
      - "{{ hostvars[groups.docker_swarm_managers[0]]['ansible_%s' % leader_advertised_interface_worker]['ipv4']['address'] }}:2377"
  become: true
  become_user: root
  tags:
    - docker-swarm-worker

# New nodes might have been added
- name: Reinspect swarm on first manager
  docker_swarm_info:
    # List nodes later to be used for setting labels:
    nodes: true
  become: true
  become_user: root
  # Run only on the first host defined as a swarm manager:
  delegate_to: "{{ groups.docker_swarm_managers[0] }}"
  register: docker_swarm_info
  tags:
    - docker-swarm-worker

- name: Update labels of all nodes
  docker_node:
    # From every Ansible-provisioned host, get its "ansible_hostname", and find
    # a swarm node ID from swarm info using said hostname
    hostname: "{{ docker_swarm_info.nodes | selectattr('Hostname', 'equalto', hostvars[item].ansible_hostname) | map(attribute='ID') | join(',') }}"
    labels: "{{ hostvars[item]['docker_swarm_node_labels'] }}"
    labels_state: replace
  with_items: "{{ groups['all'] }}"
  # Run only on the first host defined as a swarm manager:
  delegate_to: "{{ groups.docker_swarm_managers[0] }}"
  # Sometimes the update fails with: rpc error: code = Unknown desc = update out of sequence:
  retries: 3
  delay: 3
  become: true
  become_user: root  
  tags:
    - docker-swarm-worker
